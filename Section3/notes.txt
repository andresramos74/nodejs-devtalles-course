Primeros pasos de node, reforsamiento de javascript. 

Recomienda que se estudie bien las bases fundamentales de javascript.

Buenas prácticas de desarrollo de software
Dependendias de terceros como axios
Dependencias de desarrollo y producción

Cuando se hacen cambios en el desarrollo y no tener que tocar todo

Factory functions


Temas puntuales de la sección
En esta sección veremos generalidades de Node y a la vez, aprovechamos para explicar ciertos conceptos de JavaScript que son necesarios para casi cualquier aplicación de Node.

Puntualmente veremos:

Package.json

Node Modules

Scripts

Importaciones y Exportaciones

Módulos

Reforzamiento de JS

Callbacks

Arrow Functions

Factory Functions

Promises

Async Await

Peticiones Http básicas

Dependencias de Producción y Desarrollo

Patrón adaptador para nuestras dependencias

Y más

Esta sección es altamente recomendada para todos los que están empezando con NodeJS, y a la vez, sirve para refrescar un poco la memoria sobre JavaScript.


Versionamiento semántico 0.0.1   (versión mayor).(versión menor).(bug fixes)

en el package json están los scripts para ejecutar el programa.
npm "start" es un comando especial reconocido por node, no es lo mismo que "dev".

start siempre debe manejarse como el que levanta la aplicación en producción

Para configurar que automáticamente se cree la rama en remote siempre que se cree una nueva rama en local

git config --global --add --bool push.autoSetupRemote true

Se debe aplicar el principio de responsabilidad única SIEMPRE, esto es
que cada uno de nuestros archivos haga una cosa y la haga bien.

Cada archivo en node es un objecto encapsulado, no se pueden usar las funciones si no se exportan desde dicho módulo

se recomeinda exportar con module.exports = { "nombre del módulo" }, es buena práctica exportar como objeto 
porque en un futuro se pueden incorporar mas componentes al módulo y que se necesiten en otra parte de la app


const { emailTemplate } = require("./01-js-foundations/01-template"); // forma tradicional de importar modulos en node, 
no es con el import {} from "" como se importa en js

Nodemon

Es tedioso estar haciendo "npm start" para probar el código, esta no es la forma habitual de trabajar con node.

Nodemon es una herramienta que monitorea cambios en la aplicación para que inmediatamente recargue esta misma

para instalarlo en consola: npm install --save-dev nodemon

si se quiere instalar de forma global para todos los proyectos en el UDE se reemplaza "--save-dev" por "-g", esto 
depende de la práctica, a Fernando Hernandez no le gusta instalar paquetes globales por lo general, por lo que recomienda que sea por proyectos

en package.json se agregan estas lineas luego de la información de la licencia.

  "devDependencies": {
    "nodemon": "^3.0.1"
  }

  No se debe usar nodemon en un ambiente productivo. devDependencies nunca llegan a producción. Nodemon es un buen ejemplo de una dependencia de 
  desarrollo pues en producción no se necesita estar haceidno redeployments y por tanto no se necesita nodemon en producción.

  Depuración, se puede hacer desde package.json

  